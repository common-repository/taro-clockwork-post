/*! License information can be found in editor-input.js.LICENSE.txt */
(()=>{function e(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,c,a=[],l=!0,u=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=i.call(n)).done)&&(a.push(r.value),a.length!==t);l=!0);}catch(e){u=!0,o=e}finally{try{if(!l&&null!=n.return&&(c=n.return(),Object(c)!==c))return}finally{if(u)throw o}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}var n=wp.plugins.registerPlugin,r=wp.editPost.PluginPostStatusInfo,o=wp.components,i=o.ToggleControl,c=o.TextControl,a=o.Spinner,l=wp.element,u=l.useEffect,s=l.useState,p=wp.data,d=p.select,f=p.dispatch,m=wp.apiFetch,g=wp.i18n,h=g.__,x=g.sprintf,y=function(e){return e.match(/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2})/)?x("%04d-%02d-%02d %02d:%02d:59",RegExp.$1,RegExp.$2,RegExp.$3,RegExp.$4,RegExp.$5):""},E=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"success";f("core/notices").createNotice(t,e,{type:"snackbar",isDismissible:!0}).then((function(e){var t=e.notice;setTimeout((function(){f("core/notices").removeNotice(t.id)}),2e3)}))},v=null;n("tscp-post-expire-box",{render:function(){var t=d("core/editor").getCurrentPostType(),n=e(s(!1),2),o=n[0],l=n[1],p=e(s(""),2),f=p[0],g=p[1],b=e(s(!1),2),R=b[0],$=b[1],w=e(s(null),2),T=w[0],S=w[1];if(0>TscpEditorInput.postTypes.indexOf(t))return null;var A=d("core/editor").getCurrentPostId(),C=x("clockwork/v1/%1$s/%2$d/expiration",t,A),I=function(e,t){T&&(clearTimeout(T),S(null)),S(setTimeout((function(){m({path:C,method:"post",data:{should:e,expires:t}}).then((function(e){E(e.message)})).catch((function(e){E(e.message,"error")}))}),500))};return u((function(){null===v&&(v="",m({path:C}).then((function(e){$(!1),l(e.should_expires),g(function(e){return e.match(/(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):\d{2}/)?x("%04d-%02d-%02dT%02d:%02d",RegExp.$1,RegExp.$2,RegExp.$3,RegExp.$4,RegExp.$5):""}(e.expires))})).catch((function(e){$(!1),E(e.message,"error")})))}),[]),React.createElement(r,{className:"tscp-time-input"},R&&React.createElement("p",{style:{position:"absolute",top:0,right:0}},React.createElement(a,null)),React.createElement(i,{className:"tscp-time-input-toggle",label:h("Expires at specified time","tscp"),checked:o,onChange:function(e){l(e),I(e,y(f))}}),o&&React.createElement(c,{label:h("Expires At","tscp"),className:"tscp-time-input-date",type:"datetime-local",value:f,onChange:function(e){g(e),I(o,y(e))}}))}})})();